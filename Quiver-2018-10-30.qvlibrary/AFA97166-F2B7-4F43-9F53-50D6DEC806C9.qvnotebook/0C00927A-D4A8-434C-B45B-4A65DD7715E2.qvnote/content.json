{
  "title": "Var, let, const",
  "cells": [
    {
      "type": "text",
      "data": "<p style=\"margin: 0px; font-stretch: normal; font-size: 12px; line-height: normal; font-family: &quot;Helvetica Neue&quot;; color: rgb(69, 69, 69);\">In regard to using let, const and var. And the differences between them, knowing the nuances is important, but many people don't know why everyone decided to change from using var to let for mutable variables, and const for immutable values. The key points are:</p>\n<ul>\n<li style=\"margin: 0px; font-stretch: normal; font-size: 12px; line-height: normal; font-family: &quot;Helvetica Neue&quot;; color: rgb(69, 69, 69);\"><span style=\"font-stretch: normal; font-size: 10px; line-height: normal; font-family: Menlo;\"></span>let and const do not hoist (so the engine identifies those values at run time in place against the browser's compiler)</li>\n<li style=\"margin: 0px; font-stretch: normal; font-size: 12px; line-height: normal; font-family: &quot;Helvetica Neue&quot;; color: rgb(69, 69, 69);\"><span style=\"font-stretch: normal; font-size: 10px; line-height: normal; font-family: Menlo;\"></span>let and const are block scoped, meaning the variables' respective value can not \"leak\" or move into other scopes/functions/modules unless explicitly exported.</li>\n<li style=\"margin: 0px; font-stretch: normal; font-size: 12px; line-height: normal; font-family: &quot;Helvetica Neue&quot;; color: rgb(69, 69, 69);\"><span style=\"font-stretch: normal; font-size: 10px; line-height: normal; font-family: Menlo;\"></span>const maintains the integrity of value and type of the variable. So for primitive values, you can't change them. For objects/arrays, you can only change their inner elements/values and nothing on the prototype.</li>\n</ul>\n<p style=\"margin: 0px; font-stretch: normal; font-size: 12px; line-height: normal; font-family: &quot;Helvetica Neue&quot;; color: rgb(69, 69, 69);\">Lastly, abandoning var just because let and const are available is a safe pursuit... but there are instances where the hoisting nature of var is beneficial. Just have to know your tools well and know when to use them. &lt;- not directed at anyone/OP to be clear :)</p>"
    }
  ]
}