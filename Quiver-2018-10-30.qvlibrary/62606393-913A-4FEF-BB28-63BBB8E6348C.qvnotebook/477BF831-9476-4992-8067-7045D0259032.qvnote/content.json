{
  "title": "Attributes and Methods",
  "cells": [
    {
      "type": "markdown",
      "data": "## Accessing object attribute\n\nWhat happens when u access an object property like so\n\n```py\nobjectname.attributename\n```\n\nThe following objects are searched in sequeunce for the attribute:\n\n1. the object itself - `objectname.__dict__`\n2. the object's type - `objectname.__class__.__dict__` (only _user-provided_ attributes of the class)\n3. the bases of the object's classes, and so on `objectname.__class__.__bases__`\n\nIf pyton cannot find a suitably name attribute, it will raise an `AttributeError`.\n\n\n### Built-in types\n\nBuilt-in types and their instances (lists, tuples, etc) do not have a `__dict__`. Consequently, user-defined attributes cannot be set on them.\n\n## From function to method\n\nAccess the `classatrr` string on the instance gets it from the class' `__dict__`\n\n```py\n>>> class D(object):\n...     classattr = 'd attr'\n...     def f(self):\n...             return 'function f'\n...\n>>> D.__dict__\ndict_proxy({'__module__': '__main__', 'f': <function f at 0x104697050>, 'classattr': 'd attr', '__dict__': <attribute '__dict__' of 'D' objects>, '__weakref__': <attribute '__weakref__' of 'D' objects>, '__doc__': None})\n>>> d = D()\n>>> d.f is D.__dict__['f']\nFalse\n>>> d.f\n<bound method D.f of <__main__.D object at 0x1046a5bd0>>\n>>> D.__dict__['f'].__get__(d, D)\n<bound method D.f of <__main__.D object at 0x1046a5bd0>>\n```\n\nHowever not for the function. \n\nA **Bound method** is returned. It is a callable object that calls a function (`D.f` in the example) passing an instance (`d`) as the first argument in addition to passing through all the arguments it was called with. \n\n#### Creating the bound method\n\nIf python finds an object with a `__get__()` method inside the class' `__dict__`, instead of returning the object, it calls the `__get__()` method and returns the result\n\nIt is only the presence of the `__get__()` method that transforms an ordinary function into a _bound method_. \n\n## Descriptors\n\nThis is how Python's `property` type is implemented. \n\nAny object with a `__get__()` method is said to follow the _descriptor protocol_.\n\nIt is then added to another class in its definition.\n\n```py\n>>> class Desc(object):\n...     def __get__(self, obj, cls=None):\n...         pass\n\n>>> class Desc(object):\n...     def __get__(self, obj, cls=None):\n...         pass\n...     def __set__(self, obj, val):\n...         pass\n...     def __delete__(self, obj):\n...         pass\n\n>>> Desc\n<class '__main__.Desc'>\n```\n\nAccessing the property you assigned the descriptor to calls the appropriate descriptor method\n\n1. `__get__` is called when an attribute is read. `obj` is the object on which the attribute is accessed (may be `None` if the attribute is accessed directly on the class). `cls` is the class of `obj` (or the class, if the access was on the class itself `obj` is `None`)\n2. `__set__` is called when attribute is set on an instance (e.g `objectname.attrname = 12`). Here `obj` is the object on which the attribute is being set and `val` is the object provided as the value.\n\n#### Only `__get__` recieves the owner class\n\nDescriptors are assigned to a class, not to an instance, and modifying the class would actually overwite or delete the descriptor itself.\n\n#### Example pattern\n\n```py\nclass SimpleDescriptor(object):\n   def __init__(self, name):\n        self.name = name\n\n    def __get__(self, instance, owner):\n        if self.name not in instance.__dict__:\n            raise AttributeError, self.name\n        return instance.__dict__[self.name]\n\n    def __set__(self, instance, value):\n        instance.__dict__[self.name] = value\n```\n\n#### Temperature Example\n\n```py\nclass Celsius(object):\n    def __init__(self, value=0.0):\n        self.value = float(value)\n    def __get__(self, instance, owner):\n        return self.value\n    def __set__(self, instance, value):\n        self.value = float(value)\n\n\nclass Temperature(object):\n    celsius = Celsius()\n```\n\n```py\ntemp = Temperature()\ntemp.celcius # calls celcius.__get__\n```\n\n#### Quantity example\n\n[source](https://stackoverflow.com/questions/3798835/understanding-get-and-set-and-python-descriptors)\n\n\n## Two Kinds of Descriptors\n\n_data descriptors_ - `__get__()` and `__set__()` methods\n_non-data descriptors_ - only `__get__()` \n"
    }
  ]
}