{
  "title": "This",
  "cells": [
    {
      "type": "markdown",
      "data": "[Understanding JS function invocation and 'this'](https://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/)\n\n**A function invocation like fn(...args) is the same as `fn.call(window [ES5-strict: undefined], ...args)**\n\n```js \nfunction hello(word) {\n    console.log(this + \" says hello \" + word)\n}\n\n// this:\nhello(\"world\")\n\n// Desugars to this:\nhello.call(window, \"world\")\n//=> Crabdul says hello world\n\n// In ECMAScript 5\nhello.call(undefined, \"world\")\n```\n\nThis is also for anonymous functions\n```js \n// this:\n(function(){})()\n\n// Desugars to:\n(function(){}).call(window [ES5-strict: undefined])\n```\n\nThe ECMAScript 5 spec says that undefined is (almost) always passed, but that the function being called should change its thisValue to the global object when not in strict mode. This allows strict mode callers to avoid breaking existing non-strict-mode libraries.\n\n### Function.prototype.bind\n\nNotice that functions don't have a persistent notion of its `this`. It is always set at call time based upon the way it was invoked by its caller.\n\n```js\nfunction hello(thing) {\n  console.log(this + \" says hello \" + thing);\n}\n\nperson = { name: \"crabdul\" }\nperson.hello = hello;\n\nperson.hello(\"world\") \n// still desugars to person.hello.call(person, \"world\")\n//=> Crabdul says hello world\n\nhello(\"world\") \n//=> \"[object DOMWindow]world\"\n```\n\nCan be useful to have a reference to a function with a persistent `this` value.\n\n```js\n\nvar person = {\n  name: \"Crabdul\",\n  hello: function(thing) {\n    console.log(this.name + \" says hello \" + thing);\n  }\n}\n\nvar bind = function(func, thisValue) {\n    return function () {\n        return func.apply(thisValue, arguments)\n    }\n}\n\nvar boundHello = bind(person.hello, person)\n\nboundHello(\"world\")\n//=> Crabdul says hello world\n```\n\nThis can be written like:\n```js\nperson.hello.bind(person)\n```"
    }
  ]
}